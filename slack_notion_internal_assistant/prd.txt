# Slack-Notion Internal Assistant

---

- **Purpose:**
The Slack-Notion Internal Assistant enables users to query and update information in the company Notion workspace directly from Slack. It provides fast, context-aware answers to workspace questions (e.g., playbooks, project steps) and can perform safe, targeted modifications to Notion content as instructed by users. The agent is designed for internal use by VRSEN AI team members to streamline knowledge access and operational workflows, while minimizing risk of accidental data loss or unwanted changes in Notion.
- **Communication Flows:**
    - **Between Agents:**
        - If extended, the agent may interact with other internal agents (e.g., for advanced workflow automation or escalation of complex requests). Shared state may include Slack message context and Notion page references.
    - **Agent to User Communication:**
        - The agent communicates with users via Slack messages in designated channels. It responds to direct queries and action requests, providing clear feedback and confirmation of actions taken.

---

## Slack-Notion Assistant Agent

### **Role within the Agency**
Acts as a bridge between Slack and Notion, enabling users to retrieve and update workspace knowledge efficiently and safely. Responsible for:

- Answering questions about Notion content (e.g., playbooks, project steps)
- Performing safe, targeted updates to Notion pages as instructed by users
- Ensuring no accidental data loss or unwanted changes in Notion

## Knowledge

- VRSEN AI internal playbooks and documentation in Notion
- Slack channel context for user queries

### Tools

- **NotionQueryTool:**
    - **Description**: Retrieves specific information from Notion pages based on user queries.
    - **Inputs**:
        - query (str) - The user's question or information request
    - **Validation**:
        - Query must be non-empty and relevant to Notion workspace content
    - **Core Functions:**
        - Search Notion for relevant pages/blocks
        - Extract and return concise, relevant answers
    - **APIs**:
        - Notion API (official MCP or custom wrapper)
    - **Outputs**: String answer to the user's question

- **NotionUpdateTool:**
    - **Description**: Performs safe, targeted updates to Notion pages as instructed by the user (e.g., add a step to a playbook).
    - **Inputs**:
        - page_id (str) - The Notion page to update
        - update_instruction (str) - The user's modification request
    - **Validation**:
        - Only updates specified properties/blocks; must not overwrite unrelated content
    - **Core Functions:**
        - Parse user intent for update
        - Apply update to Notion page
        - Confirm and report changes
    - **APIs**:
        - Notion API (official MCP or custom wrapper)
    - **Outputs**: Confirmation message summarizing the update

- **SlackMCPTool:**
    - **Description**: This tool has already been implemented and can be reused, perhaps with minor modifications.
    - **References**:
        - https://github.com/vrsen-ai-solutions/Internal-Tools/blob/dev/tpm-agency/ProjectManagement/ScoperAgency/ProjectContextAgent/tools/SlackMCPTool.py

### Additional Notion Read Tools:

- **NotionRetrievePageTool:**
    - **Description**: Retrieves detailed metadata of a Notion page and optionally converts its content to Markdown for quick viewing.
    - **Inputs**:
        - page_id (str) - The ID of the Notion page to retrieve
        - format (str) - Output format: "json" (default) or "markdown"
    - **Validation**:
        - Must provide a valid page ID
    - **Core Functions:**
        - Fetch page properties
        - Fetch and convert page blocks to Markdown when requested
    - **APIs**:
        - Notion API (`notion.pages.retrieve`, `notion.blocks.children.list`)
    - **Outputs**: JSON string or Markdown text

- **NotionQueryDatabaseTool:**
    - **Description**: Queries a Notion database with optional filters, sorts, and pagination, returning results in JSON or Markdown list.
    - **Inputs**:
        - database_id (str) - The ID of the database to query
        - filter (dict, optional) - Notion-compatible filter object
        - sorts (list, optional) - List of Notion-compatible sort objects
        - page_size (int, default 10) - Number of entries per page
        - start_cursor (str, optional) - Pagination cursor
        - format (str) - Output format: "json" or "markdown"
    - **Core Functions:**
        - Call `notion.databases.query` with provided parameters
        - Convert results to a simple list of titles when in Markdown
    - **APIs**:
        - Notion API (`notion.databases.query`)
    - **Outputs**: JSON array or Markdown bullet list

- **NotionRetrieveBlockTool:**
    - **Description**: Retrieves a specific block's details or text content for paragraph blocks.
    - **Inputs**:
        - block_id (str) - The ID of the block to retrieve
        - format (str) - Output format: "json" (default) or "markdown"
    - **Core Functions:**
        - Call `notion.blocks.retrieve` and format output
    - **APIs**:
        - Notion API (`notion.blocks.retrieve`)
    - **Outputs**: JSON object or plain text

- **NotionRetrieveBlockChildrenTool:**
    - **Description**: Retrieves children of a Notion block, outputting JSON or Markdown paragraphs.
    - **Inputs**:
        - block_id (str) - The parent block ID
        - page_size (int, default 10) - Number of children to fetch
        - start_cursor (str, optional) - Pagination cursor
        - format (str) - Output format: "json" or "markdown"
    - **APIs**:
        - Notion API (`notion.blocks.children.list`)
    - **Outputs**: JSON array or Markdown text

- **NotionFindBlockTool:**
    - **Description**: Searches across pages to find blocks whose content matches a given query text.
    - **Inputs**:
        - query (str) - Text to search for within block content
        - page_limit (int, default 5) - Number of top pages to search
        - block_limit (int, default 50) - Maximum blocks to inspect per page
        - format (str) - Output format: "json" or "markdown"
    - **Core Functions:**
        - Perform a page search by title or metadata
        - Inspect child blocks of each page to filter matches against `query`
        - Aggregate matching blocks with snippets and identifiers
    - **APIs**:
        - Notion API (`notion.search`, `notion.blocks.children.list`)
    - **Outputs**: JSON array of block details or Markdown list of snippets with page and block IDs

- **NotionListPageBlocksTool:**
    - **Description**: Lists all blocks on a given Notion page, with optional recursive retrieval of nested blocks.
    - **Inputs**:
        - page_id (str) - The ID of the page to list blocks from
        - recursive (bool, default False) - Whether to retrieve nested child blocks
        - format (str, default "json") - Output format: "json" or "markdown"
    - **Core Functions:**
        - Paginate through `notion.blocks.children.list` to get all blocks
        - Optionally recurse into each block's children
    - **APIs**:
        - Notion API (`notion.blocks.children.list`)
    - **Outputs**: JSON array with block IDs, types, and content or Markdown list

### Example Use Cases:
- Summarize an entire Slack thread and update the Notion playbook accordingly.
- Search for specific credentials (e.g., Zapier password) stored in Notion using user context (e.g., me@vrsen.ai).
- Answer questions like "What playbook can I watch to deploy agents on Railway? What are the steps?"
- Modify playbook content, e.g., "Add another step at the end to create a staging environment in this playbook."

### Design Considerations:
- Build with the official Notion MCP for rapid development, but wrap it to filter out unnecessary metadata and reduce token usage.
- Ensure updates are safe and highly targeted, avoiding accidental removal or overwriting of unrelated content.
- Provide dynamic, context-aware integration that goes beyond static automation tools like Zapier, delivering quick wins and clear value.

---

# üåê Background:

VRSEN AI needs an internal agent that enables team members to query and update Notion workspace content directly from Slack. The agent must answer questions (e.g., about playbooks or project steps) and perform safe, targeted modifications to Notion pages, without risking accidental data loss or unwanted changes. This will streamline internal knowledge access and operational workflows.

## üèÜ Primary Goal:

Develop a Slack bot that can answer questions based on the Notion workspace and perform safe, targeted actions on it as instructed by users.

---

## DOD (Definition of Done):

### Fact

- [ ] The agent can answer user questions about Notion content via Slack
- [ ] The agent can perform targeted updates to Notion pages as instructed
- [ ] All updates are confirmed to the user and do not overwrite unrelated content
- [ ] The agent is tested both on Agencii and on Slack
- [ ] Any inconsistencies between Agencii and Slack testing are documented
- [ ] Loom video of the working agent is attached to the task and PM is notified

### Feeling

- [ ] Notion data is safe from accidental loss
- [ ] Agent provides clear, helpful responses and confirmations

### Functionality

- [ ] The agent reliably retrieves relevant Notion content in response to queries
- [ ] The agent performs only the requested updates, with no side effects
- [ ] The agent provides clear feedback and error messages for unsupported actions

---

## To-dos

- [ ] Implement NotionQueryTool for retrieving answers from Notion
- [ ] Implement NotionUpdateTool for safe, targeted Notion updates
- [ ] Implement SlackInterfaceTool for Slack communication
- [ ] Test the agent locally and on Agencii
- [ ] Document any inconsistencies between local and Agencii testing
- [ ] Attach screenshots or Loom video of the working agent and notify PM 